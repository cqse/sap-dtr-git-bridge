apply from: "$rootDir/gradle/base.gradle"

import java.time.*
import java.time.format.DateTimeFormatter
import org.apache.tools.ant.taskdefs.condition.Os

// TODO find a way to general import buildscript deps...
buildscript {
	dependencies {
		classpath fileTree("$rootDir/gradle/lib").include('**.jar')
	}
}

///////  Configuration

ext {
	// The dtr server configuration
	dtr = [
		// The dtr server URL, e.g. http://my.server:50000/dtr.
		url: null,
		user: null,
		password: null,
		remoteRootDir: '',
		workspaceDir : '/'
	]
	
	// The git bridge configuration, override in used project
	gitbridge = [
		// The root directory of the git repository.
		gitroot: null
	]
	
	diCmdTools = [
		root: null
	]

	formats = [
		GIT_COMMIT: DateTimeFormatter.ofPattern("MM/dd/yyyy'T'HH:mm:ss")
	]
}

///////  Updating the Git repository

/**
 * Returns the array to execute the DTR command. Handles common parameters defined in the configuration.
 */
def getDtrCommand(commandName) {
	def cmd
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		cmd = [ 'cmd', '/C', 'dtr.bat' ]
	} else {
		cmd = [ './dtr.sh' ]
	}
	cmd.addAll(['-un', dtr.user, '-pwd', dtr.password, commandName, "${dtr.workspaceDir}"])
	return cmd
}

/** Generates the necessary configuration files for the dtr cmd tool. */
def configureDTRClient = {
	file('.dtr').deleteDir()
	file('.dtr').mkdir()
	file('.dtr/clients.xml').text = """\
			|<?xml version="1.0" encoding="UTF-8"?>
			|<clients>
			|	<client
			|		name="dtr_shell_client"
			|		active="true"
			|		absoluteLocalRoot="${gitbridge.gitroot}"
			|		logicalSystem="dtr_shell_client" >
			|		<mountPoints>
			|			<mountPoint
			|				repositoryServerUrl="${dtr.url}"
			|				relativeRemoteRoot="${dtr.remoteRootDir}"
			|				relativeLocalRoot="" />
			|		</mountPoints>
			|	</client>
			|</clients>
			|""".stripMargin()
	file('.dtr/dtr_shell_client.system').text = """\
			|<?xml version="1.0" encoding="UTF-8"?>
			|<system name="dtr_shell_client">
			|	<repositoryServers>
			|		<repositoryServer url="${dtr.url}">
			|			<filters>
			|			</filters>
			|		</repositoryServer>
			|	</repositoryServers>
			|	<buildServers>
			|	</buildServers>
			|</system>
			|""".stripMargin()
}

/** Checks out the given version of the given file from DTR. */
def fetchCurrentState = { 
	configureDTRClient()
	def options = [
		workingDir: "${diCmdTools.root}${File.separator}dtr",
		environment: [
			'JAVA_HOME': org.gradle.internal.jvm.Jvm.current().getJavaHome(),
			'DEFAULT_PROPERTIES': "-Dvfs.configfolder=${projectDir}${File.separator}.dtr"
		]
	]
	shell(options, getDtrCommand('get'))

	// we double check the status, as the 'get' will not fail in case of networking issues
	def statusOutput = shell(options, getDtrCommand('status'))
	if (statusOutput.contains('Could not get the file system manager.')) {
		fail('Server unreachable!')
	}
}

/** Converts the given LocalDateTime to git commit format. */
def convertTimestamp = {
	return it.format(formats.GIT_COMMIT)
}

/** 
 * Stages all changes in gitbridge.gitroot and commits them with the given
 * author, message, and commit time.
 */
def commit = { author, message, time ->
	def options = [ environment: ['GIT_COMMITTER_DATE': time ], workingDir: gitbridge.gitroot ]
	println shell(options, ['git', 'add', '.'])
	println shell(options, ['git', 'commit', '--allow-empty', "--date=$time", '-m', message])
}

/** 
 * Reverts all changes in gitbridge.gitroot.
 */
def revert = {
	def options = [ workingDir: gitbridge.gitroot ]
	println shell(options, ['git', 'reset', '--hard', 'HEAD'])
}

/**
 * Initializes the git repository. Sets default committer and adds a .gitignore file
 * that prevents harvest signature files from being added to the repository.
 */
def initRepository = {
	println "${gitbridge.gitroot} does not seem to be a Git repository. Initializing."

	def options = [ workingDir: gitbridge.gitroot ]
	shell(options, ['git', 'init'])
	shell(options, ['git', 'config', 'user.name', 'DTRGitBridge'])
	shell(options, ['git', 'config', 'user.email', 'nobody@nomail.de'])
}

/** Removes all files and folders inside the git root dir except the .git folder.
 * This allows to also notice file deletions in the remote repository.
 */
def removeAllFilesInGit(root) {
	for (File file : new File(root).listFiles()) {
		if(!file.getName().equals('.git')) {
			// recursively deletes directories
			file.deleteDir();
			// deletes files
			file.delete();
		}
	}
}

/**
 * Main task. Fetches new changes from DTR and commits them to the git repository.
 */
task updateGit {
	doLast {
		assert dtr.url != null
		assert file(gitbridge.gitroot).exists()

		def gitFolder = file("${gitbridge.gitroot}/.git")
		if(!gitFolder.exists()) {
			initRepository();
		}

		removeAllFilesInGit(gitbridge.gitroot)
		fetchCurrentState()

		if(file(gitbridge.gitroot).listFiles().size() == 1) {
			revert()
			println 'Problem fetching files from DTR. Repository Reset.'
		} else {
			def gitAuthor = 'DTRGitBridge <nobody@nomail.de>'
			commit(gitAuthor, 'DTR Synchronization', convertTimestamp(LocalDateTime.now()))
			println 'Done.'
		}
	}
}
